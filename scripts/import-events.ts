/**
 * Bun script to import events from events.json into the database.
 * 
 * This script reads event data from events.json and imports them into the PostgreSQL database
 * defined in the schema at src/lib/server/schema.ts. Events with matching permalinks
 * will be updated rather than duplicated.
 * 
 * Requirements:
 * - Bun installed (https://bun.sh/docs/installation)
 * - A .env file with DATABASE_URL or DATABASE_URL set as an environment variable
 * - events.json file in the current directory
 * 
 * To run this script:
 * 1. Make sure your database has been initialized with the schema:
 *    npm run db:push
 * 
 * 2. Run the script with Bun:
 *    bun run scripts/import-events.ts
 * 
 * 3. Alternative if .env file doesn't work:
 *    DATABASE_URL="postgres://user:password@host:port/db" bun run scripts/import-events.ts
 */

import { config } from 'dotenv';
import * as schema from '../src/lib/server/schema.ts';
import type { ScrapedEvent } from '../src/types.ts';
import { db } from '../src/lib/server/db.ts';
import { sql } from 'drizzle-orm';
// Load environment variables from .env file
const env = config();

// Validate that the DATABASE_URL exists in the environment
const databaseUrl = env.parsed?.DATABASE_URL || process.env.DATABASE_URL;
if (!databaseUrl) {
    console.error('Error: DATABASE_URL environment variable is not set');
    console.error('Please set it in a .env file or directly in the command line:');
    console.error('DATABASE_URL="postgres://user:password@host:port/db" bun run ...');
    process.exit(1);
}

async function main() {
    console.log('--- Starting Event Import ---');

    // First test DB connection with a simple SELECT 1 query
    console.log('Testing database connection...');
    try {
        await db.execute(sql`SELECT 1 FROM ${schema.events}`);
        console.log('Database connection successful.');
    } catch (error) {
        console.error('Error connecting to database:', error);
        console.error('Please check your DATABASE_URL and ensure the database server is running.');
        process.exit(1);
    }

    // Read events from events.json
    let events: ScrapedEvent[];
    try {
        const eventsJson = await Bun.file('./events.json').text();
        events = JSON.parse(eventsJson);
        console.log(`Read ${events.length} events from events.json`);
    } catch (error) {
        console.error('Error reading events.json:', error);
        process.exit(1);
    }

    if (events.length === 0) {
        console.log('No events to import. Exiting.');
        process.exit(0);
    }


    console.log('Checking if events table exists and is accessible...');
    try {
        await db.select({ id: schema.events.id }).from(schema.events).limit(1);
        console.log("Table 'events' exists and is accessible.");
    } catch (error) {
        console.error("Failed to check table structure:", error);
        console.error("Please ensure the database schema is created. Run 'npm run db:push' first.");
        process.exit(1);
    }

    // Transform the events to match the database schema
    // Note: We omit the 'id' field as it's auto-generated by the database
    const eventsToInsert = events.map(event => ({
        name: event.name,
        startAt: new Date(event.startAt),
        endAt: event.endAt ? new Date(event.endAt) : null,
        address: event.address,
        price: event.price,
        description: event.description,
        imageUrls: event.imageUrls,
        host: event.host,
        hostLink: event.hostLink,
        permalink: event.permalink,
        latitude: event.latitude,
        longitude: event.longitude,
        tags: event.tags,
        scrapedAt: new Date()
    }));

    console.log('Starting to insert events...');

    let successCount = 0;
    let errorCount = 0;

    await db.delete(schema.events);

    // Insert events one by one to handle errors gracefully
    for (const event of eventsToInsert) {
        try {
            await db.insert(schema.events).values([event])

            successCount++;

            // Log progress every 10 events
            if (successCount % 10 === 0) {
                console.log(`Progress: ${successCount}/${eventsToInsert.length} events processed`);
            }
        } catch (error) {
            console.error(`Error inserting event "${event.name}":`, error);
            errorCount++;
        }
    }

    console.log(`--- Import complete ---`);
    console.log(`Successfully inserted/updated: ${successCount} events`);
    console.log(`Failed: ${errorCount} events`);
}

// Run the main function
main().catch(error => {
    console.error('Unhandled error:', error);
    process.exit(1);
}); 